{"version":3,"sources":["ErrorBoundary.jsx","components/cat/image.jsx","components/cat/cardState.jsx","components/buttons/button.jsx","components/buttons/upvote.jsx","components/buttons/downvote.jsx","components/cat/controls.jsx","components/cat/card.jsx","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","this","children","React","Component","Image","url","useEffect","style","height","src","alt","cardListState","atom","key","default","cardItemState","atomFamily","id","points","vote","selectedCardIdState","Button","selector","get","set","newCardValue","active","handleClick","onHandleClick","toggleActive","setState","onClick","value","Button_UpVote","icon","DownVote","UPDATE_ONE_CARD","gql","Controls","useMutation","updatePoints","data","useRecoilState","card","setCard","upvote","Promise","resolve","reject","then","variables","catch","console","pointStyle","color","display","flexFlow","justifyContent","alignSelf","width","Card","cardData","_id","GET_CARDS","ADD_CARD","App","addCard","addedCardData","useQuery","loading","cardList","setCardList","fetchCat","a","fetch","catData","json","response","insertOneCard","newCard","message","cards","map","log","reverse","Boolean","window","location","hostname","match","app","Realm","getValidAccessToken","currentUser","logIn","anonymous","refreshCustomData","accessToken","apolloClient","ApolloClient","link","HttpLink","uri","options","headers","Authorization","cache","InMemoryCache","typePolicies","Cards","keyFields","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.500fb535.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n      // You can also log the error to an error reporting service\r\n      // logErrorToMyService(error, errorInfo);\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\n  export default ErrorBoundary;","import React, { useEffect } from 'react';\r\n\r\nconst Image = ({url}) => {\r\n    const imageStyle = {\r\n        height: '20em'\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <img style={imageStyle} src={url} alt=\"\" />\r\n    );\r\n}\r\n\r\nexport default Image;","import { atomFamily, atom, selector } from 'recoil';\r\n\r\n//Cards state handling\r\nexport const cardListState = atom({\r\n    key: 'cards',\r\n    default: []\r\n});\r\n\r\n//Card item state handling\r\nexport const cardItemState = atomFamily({\r\n    key: 'card',\r\n    default: {id: '', url: '', points: 0, vote: 0}\r\n})\r\n\r\nexport const selectedCardIdState = atom({\r\n    key: 'selectedCardId',\r\n    default: null\r\n})\r\n\r\nexport const selectedCardState = selector({\r\n    key: 'selectedCard',\r\n    get: ({get}) => {\r\n        const id = get(selectedCardIdState);\r\n\r\n        if(id != null) {\r\n            return get(cardItemState(id));\r\n        }\r\n    },\r\n    set: ({set, get}, newCardValue) => {\r\n        const id = get(selectedCardIdState);\r\n\r\n        if(id != null) {\r\n            set(cardItemState(id), newCardValue);\r\n        }\r\n    }\r\n});","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    state = {\r\n        active: false\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.onHandleClick();\r\n    }\r\n\r\n    toggleActive = () => {\r\n        this.setState({active: !this.state.active});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                onClick={() => {\r\n                    this.toggleActive();\r\n                    this.handleClick();\r\n                }}>\r\n                \r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\n//Components\r\nimport Button from './button';\r\n\r\nclass Button_UpVote extends Component {\r\n    state = {\r\n        active: false,\r\n        icon: \"\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button onHandleClick={this.props.onHandleClick} value=\"Up Vote\" />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button_UpVote;","import React, { Component } from 'react';\r\n\r\n//Components\r\nimport Button from './button';\r\n\r\nclass DownVote extends Component {\r\n    state = {\r\n        active: false,\r\n        icon: \"\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button onHandleClick={this.props.onHandleClick} value=\"Down Vote\" />\r\n        );\r\n    }\r\n}\r\nexport default DownVote;","import React from 'react'\r\nimport { gql, useMutation } from '@apollo/client';\r\n\r\nimport { cardItemState } from './cardState'\r\nimport { useRecoilState } from 'recoil';\r\n\r\n//Components\r\nimport {UpVote, DownVote} from '../buttons/buttons'\r\nimport Points from './points'\r\n\r\nconst UPDATE_ONE_CARD = gql`\r\nmutation ($id: ObjectId!, $points: Int!){\r\n    updateOneCard(\r\n        query: {_id: $id}\r\n        set: {points: $points}\r\n    ) {\r\n        points\r\n    }\r\n}`;\r\n\r\n\r\nfunction Controls({id}) {\r\n    const [updatePoints, {data}] = useMutation(UPDATE_ONE_CARD);\r\n\r\n    const [card, setCard] = useRecoilState(cardItemState(id));\r\n\r\n    const vote = (upvote) => {\r\n        new Promise((resolve, reject) => {\r\n            switch(card.vote) {\r\n                case(0): {\r\n                    upvote ? \r\n                        resolve({points: card.points + 1, vote: 1}) :\r\n                        resolve({points: card.points - 1, vote: -1});\r\n                    break;\r\n                }\r\n\r\n                case(1): {\r\n                    upvote ?\r\n                        resolve({points: card.points - 1, vote: 0}) :\r\n                        resolve({points: card.points - 2, vote: -1});\r\n                    break;\r\n                }\r\n\r\n                case(-1): {\r\n                    upvote ?\r\n                        resolve({points: card.points + 2, vote: 1}) :\r\n                        resolve({points: card.points + 1, vote: 0});\r\n\r\n                    break;\r\n                }\r\n                default: {\r\n                    reject(\"Unable to vote\");\r\n                }\r\n            }\r\n        })\r\n        .then(({points, vote}) => {\r\n            setCard({...card, points, vote});\r\n            updatePoints({variables: {\"id\": card.id, \"points\": points}});\r\n        }).catch(console.error);\r\n    }\r\n\r\n    const controlStyle = {\r\n        display: 'flex',\r\n        flexFlow: 'row',\r\n        justifyContent: 'space-between',\r\n        alignSelf: 'center',\r\n        width: '20em'\r\n    }\r\n\r\n    const pointStyle = {\r\n        color: [\"red\", \"black\", \"green\"][card.vote + 1]\r\n    }\r\n\r\n    return (\r\n        <div style={controlStyle}>\r\n            <UpVote onHandleClick={() => {\r\n                vote(1);\r\n            }} />\r\n            <strong style={pointStyle}>{card.points}</strong>\r\n            <DownVote onHandleClick={() => {\r\n                vote(0);\r\n            }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controls;","import React, { useEffect } from 'react';\r\n\r\n//Components\r\nimport Image from './image';\r\nimport Controls from './controls';\r\n\r\nimport { cardItemState } from './cardState'\r\nimport { useRecoilState } from 'recoil';\r\n\r\nconst Card = ({cardData}) => {\r\n    const [card, setCard] = useRecoilState(cardItemState(cardData._id));\r\n    \r\n    useEffect(() => {\r\n        setCard({...card,\r\n            id: cardData._id,\r\n            url: cardData.url,\r\n            points: cardData.points,\r\n            vote: 0\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Image url={cardData.url} />\r\n            <Controls id={card.id} />\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react'\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\n\n//Components\nimport Card from './components/cat/card'\nimport { cardListState, selectedCardIdState } from './components/cat/cardState'\n\nconst GET_CARDS = gql`\nquery GetCards {\n\tcards {\n\t\t_id\n\t\turl\n\t\tpoints\n\t}\n}`;\n\nconst ADD_CARD = gql`\nmutation AddCard($url: String!) {\n\tinsertOneCard(\n\t\tdata: {\n\t\t\turl: $url,\n\t\t\tpoints: 0\n\t\t}\n\t) {\n\t\t_id\n\t\turl\n\t\tpoints\n\t}\n}`;\n\n\n\nfunction App() {\n\tconst [addCard, {addedCardData}] = useMutation(ADD_CARD);\n\tconst {loading, error, data} = useQuery(GET_CARDS)\n\n\t//State handling\n\tconst [cardList, setCardList] = useRecoilState(cardListState);\n\n\tconst fetchCat = async () => {\n\t\tlet catData = await fetch(\"https://api.thecatapi.com/v1/images/search?size=full\");\n\t\tcatData = await catData.json();\n\n\t\taddCard({variables: {url: catData[0][\"url\"]}})\n\t\t.then((response) => {\n\t\t\tconst data = response.data.insertOneCard;\n\n\t\t\tconst newCard = <Card key={data._id} cardData={data} />\n\t\t\tsetCardList([newCard, ...cardList]);\n\t\t}).catch(console.error)\n\t}\n\n\tif(loading) return <div>Loading ...</div>\n\tif(error) return <div>Error: {error.message}</div>\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={fetchCat}>Fetch cat</button>\n\n\t\t\t<div>{cardList}</div>\n\t\t\t{\n\t\t\t\tdata.cards.map((cardData) => {\n\t\t\t\t\tconsole.log(cardData);\n\t\t\t\t\treturn <Card key={cardData._id} cardData={cardData} />\n\t\t\t\t}).reverse()\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ErrorBoundary from './ErrorBoundary'\nimport { RecoilRoot } from 'recoil';\nimport { ApolloClient, ApolloProvider, InMemoryCache, HttpLink } from '@apollo/client';\n\nimport App from './App';\nimport './App.css';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport * as Realm from \"realm-web\";\n\nconst APP_ID = \"catreact-lkwiu\";\nconst app = new Realm.App(APP_ID);\n\nasync function getValidAccessToken() {\n\tif (!app.currentUser) {\n\t\tawait app.logIn(Realm.Credentials.anonymous());\n\t} else {\n\t\tawait app.currentUser.refreshCustomData();\n\t}\n\n\treturn app.currentUser.accessToken;\n}\n\nconst apolloClient = new ApolloClient({\n\tlink: new HttpLink({\n\t\turi: `https://realm.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`,\n\n\t\tfetch: async (uri, options) => {\n\t\t\tconst accessToken = await getValidAccessToken();\n\t\t\toptions.headers.Authorization = `Bearer ${accessToken}`;\n\t\t\treturn fetch(uri, options);\n\t\t},\n\t}),\n\n\tcache: new InMemoryCache({\n\t\ttypePolicies: {\n\t\t\tCards: {\n\t\t\t\tkeyFields: [\"_id\", \"url\", \"points\"]\n\t\t\t}\n\t\t}\n\t})\n});\n\nReactDOM.render(\n\t// <React.StrictMode>\n\t\t<ErrorBoundary>\n\t\t\t<RecoilRoot>\n\t\t\t\t<ApolloProvider client={apolloClient}>\n\t\t\t\t\t<App />\n\t\t\t\t</ApolloProvider>\n\t\t\t</RecoilRoot>\n\t\t</ErrorBoundary>\n\t// </React.StrictMode>\n\t,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}
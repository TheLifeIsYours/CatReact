{"version":3,"sources":["components/cat/image.jsx","components/buttons/button.jsx","components/buttons/upvote.jsx","components/buttons/downvote.jsx","components/cat/points.jsx","components/cat/controls.jsx","components/cat/card.jsx","components/cat/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Image","imageStyle","height","style","this","src","props","alt","Component","Button","state","active","handleClick","onHandleClick","toggleActive","setState","onClick","value","Button_UpVote","icon","DownVote","Points","points","Controls","vote","upVote","downVote","controlStyle","display","flexFlow","justifyContent","alignSelf","width","Card","url","Main","cards","fetchCat","a","fetch","cardData","json","newCard","key","length","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ec1ffe0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Image extends Component {\r\n\r\n    imageStyle = {\r\n        height: '20em'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img style={this.imageStyle} src={this.props.src} alt=\"\" />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    state = {\r\n        active: false\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.onHandleClick();\r\n    }\r\n\r\n    toggleActive = () => {\r\n        this.setState({active: !this.state.active});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                onClick={() => {\r\n                    this.toggleActive();\r\n                    this.handleClick();\r\n                }}>\r\n                \r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\n//Components\r\nimport Button from './button';\r\n\r\nclass Button_UpVote extends Component {\r\n    state = {\r\n        active: false,\r\n        icon: \"\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button onHandleClick={this.props.onHandleClick} value=\"Up Vote\" />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button_UpVote;","import React, { Component } from 'react';\r\n\r\n//Components\r\nimport Button from './button';\r\n\r\nclass DownVote extends Component {\r\n    state = {\r\n        active: false,\r\n        icon: \"\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button onHandleClick={this.props.onHandleClick} value=\"Down Vote\" />\r\n        );\r\n    }\r\n}\r\nexport default DownVote;","import React, { Component } from 'react';\r\n\r\nclass Points extends Component {\r\n    render() {\r\n        return (\r\n            <strong>{this.props.points}</strong>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Points;","import React, { Component } from 'react'\r\n\r\n//Components\r\nimport {UpVote, DownVote} from '../buttons/buttons'\r\nimport Points from './points'\r\n\r\n\r\nclass Controls extends Component {\r\n    state = {\r\n        vote: 0,\r\n        points: 0\r\n    }\r\n\r\n    upVote = () => {\r\n        switch(this.state.vote) {\r\n            case(0): {\r\n                this.setState((state, props) => ({\r\n                    points: state.points + 1\r\n                }));\r\n\r\n                this.setState({vote: 1});\r\n                break;\r\n            }\r\n\r\n            case(1): {\r\n                this.setState((state, props) => ({\r\n                    points: state.points - 1\r\n                }));\r\n                \r\n                this.setState({vote: 0});\r\n                break;\r\n            }\r\n\r\n            case(-1): {\r\n                this.setState((state, props) => ({\r\n                    points: state.points + 2\r\n                }));\r\n\r\n                this.setState({vote: 1});\r\n                break;\r\n            }\r\n            default: {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    downVote = () => {\r\n        switch(this.state.vote) {\r\n            case(0): {\r\n                this.setState((state, props) => ({\r\n                    points: state.points - 1\r\n                }));\r\n\r\n                this.setState({vote: -1});\r\n                break;\r\n            }\r\n\r\n            case(1): {\r\n                this.setState((state, props) => ({\r\n                    points: state.points - 2\r\n                }));\r\n\r\n                this.setState({vote: -1});\r\n                break;\r\n            }\r\n\r\n            case(-1): {\r\n                this.setState((state, props) => ({\r\n                    points: state.points + 1\r\n                }));\r\n\r\n                this.setState({vote: 0});\r\n                break;\r\n            }\r\n            default: {\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    controlStyle = {\r\n        display: 'flex',\r\n        flexFlow: 'row',\r\n        justifyContent: 'space-between',\r\n        alignSelf: 'center',\r\n        width: '20em'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.controlStyle}>\r\n                <UpVote onHandleClick={this.upVote} />\r\n                <Points points={this.state.points} />\r\n                <DownVote onHandleClick={this.downVote} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Controls;","import React, { Component } from 'react';\r\n\r\n//Components\r\nimport Image from './image';\r\nimport Controls from './controls';\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Image src={this.props.url} />\r\n                <Controls />\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\n\r\n//Components\r\nimport Card from './card';\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        cards: []\r\n    }\r\n    \r\n    fetchCat = async () => {\r\n        let cardData = await fetch(\"https://api.thecatapi.com/v1/images/search?size=full\");\r\n        cardData = await cardData.json();\r\n    \r\n        let newCard = <Card url={cardData[0][\"url\"]} key={this.state.cards.length} />;\r\n    \r\n        this.setState({ cards: [newCard, ...this.state.cards]});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>{this.state.cards}</div>\r\n                <button onClick={this.fetchCat}>Fetch cat</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\n\nimport './App.css';\n\n//Components\nimport Main from './components/cat/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}